{
  "_args": [
    [
      {
        "raw": "mongo-faceted@git://github.com/AlphaGit/mongo-faceted.git",
        "scope": null,
        "escapedName": "mongo-faceted",
        "name": "mongo-faceted",
        "rawSpec": "git://github.com/AlphaGit/mongo-faceted.git",
        "spec": "git://github.com/AlphaGit/mongo-faceted.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:AlphaGit/mongo-faceted.git",
          "sshUrl": "git+ssh://git@github.com/AlphaGit/mongo-faceted.git",
          "httpsUrl": "git+https://github.com/AlphaGit/mongo-faceted.git",
          "gitUrl": "git://github.com/AlphaGit/mongo-faceted.git",
          "shortcut": "github:AlphaGit/mongo-faceted",
          "directUrl": "https://raw.githubusercontent.com/AlphaGit/mongo-faceted/master/package.json"
        }
      },
      "/Users/romeu/Development/bd_services"
    ]
  ],
  "_from": "git://github.com/AlphaGit/mongo-faceted.git",
  "_id": "mongo-faceted@0.1.0",
  "_inCache": true,
  "_location": "/mongo-faceted",
  "_phantomChildren": {
    "buffer-shims": "1.0.0",
    "core-util-is": "1.0.2",
    "hooks": "0.2.1",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "kerberos": "0.0.11",
    "nan": "1.8.4",
    "process-nextick-args": "1.0.7",
    "regexp-clone": "0.0.1",
    "safe-buffer": "5.0.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "mongo-faceted@git://github.com/AlphaGit/mongo-faceted.git",
    "scope": null,
    "escapedName": "mongo-faceted",
    "name": "mongo-faceted",
    "rawSpec": "git://github.com/AlphaGit/mongo-faceted.git",
    "spec": "git://github.com/AlphaGit/mongo-faceted.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:AlphaGit/mongo-faceted.git",
      "sshUrl": "git+ssh://git@github.com/AlphaGit/mongo-faceted.git",
      "httpsUrl": "git+https://github.com/AlphaGit/mongo-faceted.git",
      "gitUrl": "git://github.com/AlphaGit/mongo-faceted.git",
      "shortcut": "github:AlphaGit/mongo-faceted",
      "directUrl": "https://raw.githubusercontent.com/AlphaGit/mongo-faceted/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/AlphaGit/mongo-faceted.git#da1de9897dec1c4aa8cbb3b6048039e80d6156c0",
  "_shasum": "64ff5c98b5563f0c1bf6fb0d6af1294cc4c8a62a",
  "_shrinkwrap": null,
  "_spec": "mongo-faceted@git://github.com/AlphaGit/mongo-faceted.git",
  "_where": "/Users/romeu/Development/bd_services",
  "author": {
    "name": "Alpha",
    "email": "alphagma@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/AlphaGit/mongo-faceted/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "lodash": "^2.4.1 || ^3.5.0",
    "mongodb": "^1.4.33",
    "mongoose": "~3.8.16"
  },
  "description": "Using facets with MongoDB",
  "devDependencies": {
    "cool-reporter": "^0.1.51",
    "gulp": "^3.8.10",
    "gulp-jscs": "^1.3.1",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "gulp-util": "^3.0.1",
    "mocha": "^2.1.0",
    "node-debug": "~0.1.0",
    "should": "^4.4.2"
  },
  "gitHead": "da1de9897dec1c4aa8cbb3b6048039e80d6156c0",
  "homepage": "https://github.com/AlphaGit/mongo-faceted",
  "keywords": [
    "mongo",
    "facets",
    "mongodb",
    "search"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "mongo-faceted",
  "optionalDependencies": {
    "mongoose": "~3.8.16"
  },
  "readme": "[![Build Status](https://api.shippable.com/projects/54a0895ad46935d5fbc112c8/badge?branchName=master)](https://app.shippable.com/projects/54a0895ad46935d5fbc112c8/builds/latest)\n[![Code Climate](https://codeclimate.com/github/AlphaGit/mongo-faceted/badges/gpa.svg)](https://codeclimate.com/github/AlphaGit/mongo-faceted) [![Test Coverage](https://codeclimate.com/github/AlphaGit/mongo-faceted/badges/coverage.svg)](https://codeclimate.com/github/AlphaGit/mongo-faceted)\n[![Dependencies](https://david-dm.org/AlphaGit/mongo-faceted.svg)](https://david-dm.org/AlphaGit/mongo-faceted)\n\n# mongo-faceted\n\nCreating faceted searches in MongoDB.\n\n## Introduction\n\nThis library will provide a few helper functions to extract facets out of a\nMongoDB database. You can optionally use [mongoose][], in which case you'll also\nget two extra functions defined statically in your models.\n\n## Initializing\n\n**MongoDB:** Nothing to do. :)\n\n**Mongoose:**\n\n```javascript\nvar mongooseFacets = require('mongo-facets').mongooseFacets;\nmongooseFacets('MyModelName', MyModel);\n```\n\nThis will add `MyModel.findWithFacets(...)` and `MyModel.getFacets(...)` to your\nmodel's static methods.\n\nIf you did not install optional dependencies, mongoose will not be available and\nthese two functions will bite your hand off. Be warned.\n\n## Using\n\n`Model.findWithFacets(filter, callback)` (Only available with Mongoose.)\n\n- `filter`: `Object`. Filter documents for which facets will be generated.\n  Accepts all options that mongoose's `.find(filter)` does.\n- `callback`: `Function`. The first parameter will be an error object if it\n  was raised, null otherwise. The second parameter will be the find() results\n  and it will also have a property `facets` on which facets results will be\n  present.\n\n`Model.getFacets(filter, callback)`  (Only available with Mongoose.)\n\n- `filter`: `Object`. Filter documents for which facets will be generated.\n  Accepts all options that mongoose's `.find(filter)` does.\n- `callback`: `Function`. The first parameter will be an error object if it\n  was raised, null otherwise. The second parameter will be the retrieved facets.\n\n```javascript\nvar mongoFacets = require('mongo-facets').mongoFacets;\nmongoFacets.getFacets(collection, filter, facetTypes, callback)\n```\n\n- `collection`: `Object`. The collection object from the MongoDB Driver. You can\n  retrieve it by executing `db.collection('myCollectionName', callback)`.\n- `filter`: `Object`. Filter documents for which facets will be generated.\n  Accepts all options that Mongo's `.find(filter)` does.\n- `facetTypes`: `Object`. Object indicator of the facets that need to be\n  retrieved and their corresponding types in the document. Keys are the property\n  names and values are the types.\n- `callback`: `Function`. The first parameter will be an error object if it\n  was raised, null otherwise. The second parameter will be the retrieved facets.\n\n### Example\n\n```javascript\nvar testData = [{\n  stringField: 'One',\n  numberField: 1,\n  arrayOfStringsField: ['Uno', 'Eins', 'Raz']\n}, {\n  stringField: 'Two',\n  numberField: 2,\n  arrayOfStringsField: ['Dos', 'Zwei', 'Dva']\n}, {\n  stringField: 'Three',\n  numberField: 3,\n  arrayOfStringsField: ['Tres', 'Drei', 'Tri']\n}];\n// ... insert this data into the database ...\n\nvar mongoFacets = require('mongo-facets').mongoFacets;\n\nvar filter = { $or: [{ numberField: 1 }, { numberField: 2 }] };\n\nvar facetTypes = {\n  stringField: String,\n  numberField: Number,\n  arrayOfStringsField: Array\n};\n\nmongoFacets.getFacets(testDataCollection, filter, facetTypes, function(err, facets) {\n  /* facets should have:\n\n  {\n    stringField: ['One', 'Two']\n    numberField: [1, 2],\n    arrayOfStringsField: ['Uno', 'Eins', 'Raz', 'Dos', 'Zwei', 'Dva']\n  }\n\n  */\n});\n```\n\n## To test\n\n```console\ngulp\n```\n\nOr, if you're into watching your code as it grows:\n\n```console\ngulp watch\n```\n\n<!-- Link references -->\n\n[mongoose]: https://www.npmjs.com/package/mongoose \"Mongoose\"",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/AlphaGit/mongo-faceted.git"
  },
  "scripts": {
    "test": "gulp"
  },
  "version": "0.1.0"
}
